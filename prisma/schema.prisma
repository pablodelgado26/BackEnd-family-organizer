// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  password String
  gender   String? // "masculino", "feminino", "outro"
  
  // Relacionamentos
  familyGroups FamilyGroupMember[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model FamilyGroup {
  id          Int    @id @default(autoincrement())
  name        String // Ex: "Fam√≠lia Garcia"
  inviteCode  String @unique
  
  // Relacionamentos
  members       FamilyGroupMember[]
  appointments  Appointment[]
  events        Event[]
  notes         Note[]
  places        Place[]
  photos        Photo[]
  albums        Album[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("family_groups")
}

model FamilyGroupMember {
  id            Int         @id @default(autoincrement())
  userId        Int
  familyGroupId Int
  role          String      @default("member") // "admin", "member"
  
  // Relacionamentos
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  familyGroup FamilyGroup @relation(fields: [familyGroupId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, familyGroupId])
  @@map("family_group_members")
}

model Appointment {
  id            Int         @id @default(autoincrement())
  title         String
  doctor        String?
  location      String
  date          DateTime
  time          String
  description   String?
  familyGroupId Int
  
  // Relacionamento
  familyGroup FamilyGroup @relation(fields: [familyGroupId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("appointments")
}

model Event {
  id            Int         @id @default(autoincrement())
  title         String
  description   String?
  date          DateTime
  time          String?
  location      String?
  type          String      // "aniversario", "reuniao", "viagem", "outro"
  familyGroupId Int
  
  // Relacionamento
  familyGroup FamilyGroup @relation(fields: [familyGroupId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("events")
}

model Note {
  id            Int         @id @default(autoincrement())
  title         String
  content       String
  priority      String      @default("normal") // "baixa", "normal", "alta"
  familyGroupId Int
  
  // Relacionamento
  familyGroup FamilyGroup @relation(fields: [familyGroupId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("notes")
}

model Place {
  id            Int         @id @default(autoincrement())
  name          String
  address       String
  type          String      // "hospital", "escola", "mercado", "outro"
  phone         String?
  notes         String?
  familyGroupId Int
  
  // Relacionamento
  familyGroup FamilyGroup @relation(fields: [familyGroupId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("places")
}

model Album {
  id            Int         @id @default(autoincrement())
  name          String
  description   String?
  familyGroupId Int
  
  // Relacionamentos
  familyGroup FamilyGroup @relation(fields: [familyGroupId], references: [id], onDelete: Cascade)
  photos      Photo[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("albums")
}

model Photo {
  id            Int         @id @default(autoincrement())
  title         String?
  url           String
  description   String?
  familyGroupId Int
  albumId       Int?
  
  // Relacionamentos
  familyGroup FamilyGroup @relation(fields: [familyGroupId], references: [id], onDelete: Cascade)
  album       Album?      @relation(fields: [albumId], references: [id], onDelete: SetNull)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("photos")
}